{"version":3,"sources":["components/SmallBox.js","components/SmallBoxContainer.js","App.js","serviceWorker.js","index.js"],"names":["SmallBox","react_default","a","createElement","className","concat","this","props","colorClass","amount","title","iconClass","href","Component","SmallBoxContainer","formatNumber","num","toString","replace","components_SmallBox","budget","total_spent","wallet_balance","last_month_spent","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","smallBox","_this2","axios","get","then","response","update","$set","data","small_box","setState","catch","error","console","log","components_SmallBoxContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uRAsBeA,mLAlBX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAS,aAAAC,OAAeC,KAAKC,MAAMC,aACtCP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,UAAKG,KAAKC,MAAME,OAAOR,EAAAC,EAAAC,cAAA,sBAEvBF,EAAAC,EAAAC,cAAA,SAAIG,KAAKC,MAAMG,QAEjBT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAS,OAAAC,OAASC,KAAKC,MAAMI,cAElCV,EAAAC,EAAAC,cAAA,KAAGS,KAAK,IAAIR,UAAU,oBAAtB,aAAmDH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uCAbnDS,aCuBRC,6MApBbC,aAAe,SAACC,GACd,OAAOA,EAAIC,WAAWC,QAAQ,0BAA2B,gFAIzD,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACgB,EAAD,CAAUV,OAAQH,KAAKS,aAAaT,KAAKC,MAAMa,QAASV,MAAM,SAC5DF,WAAW,UAAUG,UAAU,aACjCV,EAAAC,EAAAC,cAACgB,EAAD,CAAUV,OAAQH,KAAKS,aAAaT,KAAKC,MAAMc,aAAcX,MAAM,cACjEF,WAAW,WAAWG,UAAU,iBAClCV,EAAAC,EAAAC,cAACgB,EAAD,CAAUV,OAAQH,KAAKS,aAAaT,KAAKC,MAAMe,gBAAiBZ,MAAM,iBACpEF,WAAW,YAAYG,UAAU,aACnCV,EAAAC,EAAAC,cAACgB,EAAD,CAAUV,OAAQH,KAAKS,aAAaT,KAAKC,MAAMgB,kBAAmBb,MAAM,mBACtEF,WAAW,SAASG,UAAU,yBAhBRE,8BCsCjBW,cAjCb,SAAAA,EAAYjB,GAAO,IAAAkB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAApB,KAAAkB,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAApB,KAAAoB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAxB,KAAMC,KACDwB,MAAQ,CACXC,SAAU,CACRZ,OAAQ,EACRC,YAAa,EACbC,eAAgB,EAChBC,iBAAkB,IAPLE,mFAYC,IAAAQ,EAAA3B,KAClB4B,IAAMC,IAAI,0EACTC,KAAK,SAAAC,GACJ,IAAML,EAAWM,IAAOL,EAAKF,MAAMC,SAAU,CAACO,KAAMF,EAASG,KAAKC,YAClER,EAAKS,SAAS,CAACV,SAAUA,MAE1BW,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,sCAI5B,OACE3C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4C,EAAD,CAAmB3B,OAAQd,KAAKyB,MAAMC,SAASZ,OAC7CC,YAAaf,KAAKyB,MAAMC,SAASX,YACjCC,eAAgBhB,KAAKyB,MAAMC,SAASV,eACpCC,iBAAkBjB,KAAKyB,MAAMC,SAAST,2BA7B9BV,aCMEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.028ddb89.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass SmallBox extends Component {\n  render() {\n    return (\n      <div className=\"col-lg-3 col-xs-6\">\n        <div className={`small-box ${this.props.colorClass}`}>\n          <div className=\"inner\">\n            <h3>{this.props.amount}<sup>Ä‘</sup></h3>\n\n            <p>{this.props.title}</p>\n          </div>\n          <div className=\"icon\">\n            <i className={`ion ${this.props.iconClass}`}></i>\n          </div>\n          <a href=\"#\" className=\"small-box-footer\">More info <i className=\"fa fa-arrow-circle-right\"></i></a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SmallBox","import React, { Component } from 'react'\nimport SmallBox from './SmallBox'\n\nclass SmallBoxContainer extends Component {\n\n  formatNumber = (num) => {\n    return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1.') \n  }\n\n  render() {\n    return (\n      <div className=\"row\">\n        <SmallBox amount={this.formatNumber(this.props.budget)} title=\"Budget\" \n          colorClass=\"bg-aqua\" iconClass=\"ion-cash\" />\n        <SmallBox amount={this.formatNumber(this.props.total_spent)} title=\"Total spent\" \n          colorClass=\"bg-green\" iconClass=\"ion-ios-cart\" />\n        <SmallBox amount={this.formatNumber(this.props.wallet_balance)} title=\"Wallet balance\" \n          colorClass=\"bg-yellow\" iconClass=\"ion-home\" />\n        <SmallBox amount={this.formatNumber(this.props.last_month_spent)} title=\"Last month spent\" \n          colorClass=\"bg-red\" iconClass=\"ion-calendar\" />\n      </div>\n    );\n  }\n}\n\nexport default SmallBoxContainer\n","import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios'\nimport SmallBoxContainer from './components/SmallBoxContainer'\nimport update from 'immutability-helper'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      smallBox: {\n        budget: 0,\n        total_spent: 0,\n        wallet_balance: 0,\n        last_month_spent: 0\n      }\n    }\n  }\n\n  componentDidMount() {\n    axios.get('https://moneystat-api.herokuapp.com/api/v1/dashboards.json?wallet_id=1')\n    .then(response => {\n      const smallBox = update(this.state.smallBox, {$set: response.data.small_box})\n      this.setState({smallBox: smallBox})\n    })\n    .catch(error => console.log(error))\n  }\n\n  render() {\n    return (\n      <div>\n        <SmallBoxContainer budget={this.state.smallBox.budget} \n          total_spent={this.state.smallBox.total_spent}\n          wallet_balance={this.state.smallBox.wallet_balance} \n          last_month_spent={this.state.smallBox.last_month_spent} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}